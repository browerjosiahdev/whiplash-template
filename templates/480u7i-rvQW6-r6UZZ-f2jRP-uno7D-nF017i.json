{"data":{"css":{"mode":"scss","value":".HorzBarGraphMenu {\n    position: relative;\n    \n    .page-graphs {\n        .page-item {\n            cursor: pointer;\n            margin-top: 35px;\n            width: 100%;\n            \n            &:first-child {\n                margin-top: 15px;\n            }\n            \n            &.current {\n                .label {\n                    color: #ff9922;\n                    text-shadow: none;\n                }\n            }\n            \n            .label {\n                color: #fff;\n                display: inline-block;\n                margin-right: 10px;\n                text-align: right;\n                text-shadow: 0 0 1px #000;\n                vertical-align: bottom;\n                width: 100px;\n            }\n            \n            .progress-bar {\n                background: none;\n                border-bottom: 1px solid #fff;\n                display: inline-block;\n                height: 25px;\n                position: relative;\n                vertical-align: bottom;\n                width: calc(100% - 110px);\n                \n                .complete { \n                    background-color: #000;\n                    background-color: rgba(0, 0, 0, 0.25);\n                    display: inline-block;\n                    height: 100%;\n                    vertical-align: middle;\n                }\n                \n                .incomplete {\n                    background-color: #99ccee;\n                    display: inline-block;\n                    height: 100%;\n                    vertical-align: middle;\n                }\n                    \n                .read-out {\n                    color: #fff;\n                    font-size: 1.5em;\n                    font-weight: bold;\n                    margin-left: -25px;\n                    position: absolute;\n                    text-align: center;\n                    text-shadow: 0 0 1px #000;\n                    top: -25px;\n                    width: 50px;\n                }\n            }\n        }\n    }\n    \n    .vert-grid-lines {\n        height: 100%;\n        left: 160px;\n        position: absolute;\n        top: 0;\n        width: calc(100% - 160px);\n        \n        .vert-grid-line {\n            background-color: #fff;\n            height: 100%;\n            position: absolute;\n            width: 1px;\n        }\n    }\n}","processed":".HorzBarGraphMenu {\n  position: relative; }\n  .HorzBarGraphMenu .page-graphs .page-item {\n    cursor: pointer;\n    margin-top: 35px;\n    width: 100%; }\n    .HorzBarGraphMenu .page-graphs .page-item:first-child {\n      margin-top: 15px; }\n    .HorzBarGraphMenu .page-graphs .page-item.current .label {\n      color: #ff9922;\n      text-shadow: none; }\n    .HorzBarGraphMenu .page-graphs .page-item .label {\n      color: #fff;\n      display: inline-block;\n      margin-right: 10px;\n      text-align: right;\n      text-shadow: 0 0 1px #000;\n      vertical-align: bottom;\n      width: 100px; }\n    .HorzBarGraphMenu .page-graphs .page-item .progress-bar {\n      background: none;\n      border-bottom: 1px solid #fff;\n      display: inline-block;\n      height: 25px;\n      position: relative;\n      vertical-align: bottom;\n      width: calc(100% - 110px); }\n      .HorzBarGraphMenu .page-graphs .page-item .progress-bar .complete {\n        background-color: #000;\n        background-color: rgba(0, 0, 0, 0.25);\n        display: inline-block;\n        height: 100%;\n        vertical-align: middle; }\n      .HorzBarGraphMenu .page-graphs .page-item .progress-bar .incomplete {\n        background-color: #99ccee;\n        display: inline-block;\n        height: 100%;\n        vertical-align: middle; }\n      .HorzBarGraphMenu .page-graphs .page-item .progress-bar .read-out {\n        color: #fff;\n        font-size: 1.5em;\n        font-weight: bold;\n        margin-left: -25px;\n        position: absolute;\n        text-align: center;\n        text-shadow: 0 0 1px #000;\n        top: -25px;\n        width: 50px; }\n  .HorzBarGraphMenu .vert-grid-lines {\n    height: 100%;\n    left: 160px;\n    position: absolute;\n    top: 0;\n    width: calc(100% - 160px); }\n    .HorzBarGraphMenu .vert-grid-lines .vert-grid-line {\n      background-color: #fff;\n      height: 100%;\n      position: absolute;\n      width: 1px; }\n"},"react":{"mode":"jsx","value":"const Template = React.createClass({\n    onNodeClick (index) {\n        if (this.props.navigateToPage) {\n            this.props.navigateToPage(index);\n        }\n    },\n\trender () {\n\t    return (\n\t        <div className=\"HorzBarGraphMenu\">\n\t            <div className=\"vert-grid-lines\">\n\t                {this.renderVertGridLines()}\n\t            </div>\n\t            <div className=\"page-graphs\">\n\t                {this.props.project.nodes.map(this.renderNodes)}\n\t            </div>\n\t        </div>\n\t    );\n\t},\n\trenderNodes (node, index) {\n\t    if (node.type == 'container') {\n\t        return null;\n\t    }\n\t    \n\t    return (\n\t        <Node\n\t            {...node}\n\t            index={index}\n\t            key={node.guid}\n\t            onClick={this.onNodeClick.bind(this, index)}\n\t            savedData={this.props.savedData} />\n\t    );\n\t},\n\trenderVertGridLines () {\n\t    var gridLines = [];\n\t    for (var i = 0; i < 6; i++) {\n\t        gridLines.push(\n\t            <div \n\t                className=\"vert-grid-line\" \n\t                key={i} \n\t                style={{ \n\t                    left: `${Math.floor(100 * (i / 6))}%` \n\t                }} />\n\t        );\n\t    }\n\t    return gridLines;\n\t}\n});\n\nconst Node = React.createClass({\n    render () {\n        var courseData = (\n            (this.props.savedData && this.props.savedData[CourseConstants.COURSE_DATA])\n                ? this.props.savedData[CourseConstants.COURSE_DATA]\n                : null\n        );\n        var percent = 0;\n        if (courseData) {\n            const getNodeCompletion = (node) => {\n                return (\n                    courseData[node.guid] && !isNaN(courseData[node.guid].completion)\n                        ? courseData[node.guid].completion\n                        : 0\n                );\n            };\n            if (this.props.type == 'module') {\n                const getCompletion = (node) => {\n                    if (node.type == 'module') {\n                        if (!node.nodes || !node.nodes.length) {\n                            return [100];\n                        }\n                        \n                        let completion = [];\n                        for (let i = 0; i < node.nodes.length; i++) {\n                            let child = node.nodes[i];\n                            completion.push(getCompletion(child));\n                        }\n                        return completion;\n                    } else {\n                        return getNodeCompletion(node);\n                    }\n                };\n                let completion = getCompletion(this.props);\n                for (let i = 0; i < completion.length; i++) {\n                    percent += completion[i];\n                }\n                percent /= completion.length;\n            } else {\n                percent = getNodeCompletion(this.props);\n            }\n        }\n        return (\n            <div \n                {...this.props} \n                className=\"page-item\">\n                    <div className=\"label\">{this.props.name}</div>\n                    <div className=\"progress-bar\">\n                        <div \n                            className=\"complete\" \n                            style={{ \n                                width: `${percent}%`\n                            }} />\n                        <div \n                            className=\"incomplete\" \n                            style={{\n                                width: `${(100 - percent)}%`\n                            }} />\n                        <div \n                            className=\"read-out\" \n                            style={{\n                                left: `${percent}%`\n                            }}>\n                                {percent}%\n                        </div>\n                    </div>\n            </div>\n        );\n    }\n});","processed":"\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar Template = React.createClass({\n    displayName: \"Template\",\n\n    onNodeClick: function onNodeClick(index) {\n        if (this.props.navigateToPage) {\n            this.props.navigateToPage(index);\n        }\n    },\n    render: function render() {\n        return React.createElement(\n            \"div\",\n            { className: \"HorzBarGraphMenu\" },\n            React.createElement(\n                \"div\",\n                { className: \"vert-grid-lines\" },\n                this.renderVertGridLines()\n            ),\n            React.createElement(\n                \"div\",\n                { className: \"page-graphs\" },\n                this.props.project.nodes.map(this.renderNodes)\n            )\n        );\n    },\n    renderNodes: function renderNodes(node, index) {\n        if (node.type == 'container') {\n            return null;\n        }\n\n        return React.createElement(Node, _extends({}, node, {\n            index: index,\n            key: node.guid,\n            onClick: this.onNodeClick.bind(this, index),\n            savedData: this.props.savedData }));\n    },\n    renderVertGridLines: function renderVertGridLines() {\n        var gridLines = [];\n        for (var i = 0; i < 6; i++) {\n            gridLines.push(React.createElement(\"div\", {\n                className: \"vert-grid-line\",\n                key: i,\n                style: {\n                    left: Math.floor(100 * (i / 6)) + \"%\"\n                } }));\n        }\n        return gridLines;\n    }\n});\n\nvar Node = React.createClass({\n    displayName: \"Node\",\n\n    render: function render() {\n        var _this = this;\n\n        var courseData = this.props.savedData && this.props.savedData[CourseConstants.COURSE_DATA] ? this.props.savedData[CourseConstants.COURSE_DATA] : null;\n        var percent = 0;\n        if (courseData) {\n            (function () {\n                var getNodeCompletion = function getNodeCompletion(node) {\n                    return courseData[node.guid] && !isNaN(courseData[node.guid].completion) ? courseData[node.guid].completion : 0;\n                };\n                if (_this.props.type == 'module') {\n                    (function () {\n                        var getCompletion = function getCompletion(node) {\n                            if (node.type == 'module') {\n                                if (!node.nodes || !node.nodes.length) {\n                                    return [100];\n                                }\n\n                                var _completion = [];\n                                for (var i = 0; i < node.nodes.length; i++) {\n                                    var child = node.nodes[i];\n                                    _completion.push(getCompletion(child));\n                                }\n                                return _completion;\n                            } else {\n                                return getNodeCompletion(node);\n                            }\n                        };\n                        var completion = getCompletion(_this.props);\n                        for (var i = 0; i < completion.length; i++) {\n                            percent += completion[i];\n                        }\n                        percent /= completion.length;\n                    })();\n                } else {\n                    percent = getNodeCompletion(_this.props);\n                }\n            })();\n        }\n        return React.createElement(\n            \"div\",\n            _extends({}, this.props, {\n                className: \"page-item\" }),\n            React.createElement(\n                \"div\",\n                { className: \"label\" },\n                this.props.name\n            ),\n            React.createElement(\n                \"div\",\n                { className: \"progress-bar\" },\n                React.createElement(\"div\", {\n                    className: \"complete\",\n                    style: {\n                        width: percent + \"%\"\n                    } }),\n                React.createElement(\"div\", {\n                    className: \"incomplete\",\n                    style: {\n                        width: 100 - percent + \"%\"\n                    } }),\n                React.createElement(\n                    \"div\",\n                    {\n                        className: \"read-out\",\n                        style: {\n                            left: percent + \"%\"\n                        } },\n                    percent,\n                    \"%\"\n                )\n            )\n        );\n    }\n});"},"schema":{"mode":"json","value":"{\n\n}"}},"name":"HorzBarGraphMenu","version":"1.0.0"}
