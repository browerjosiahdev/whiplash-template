{"data":{"css":{"mode":"scss","value":".VideoSwap {\n    .content-wrapper {\n        height: 100%;\n        padding: 20px;\n        padding-top: 40px;\n    }\n\n    .intro-container {\n        float: left;\n        height: 100%;\n        width: 30%;\n\n        .directions {\n            font-size: 1.3em;\n            margin-bottom: 10px;\n        }\n    \n        .intro {\n            margin-bottom: 10px;\n        }\n\n        h1 {\n            margin-bottom: 10px;\n        }\n    }\n\n    .video-overlay {\n        background-color: rgba(0, 0, 0, 0.75);\n        height: 100%;\n        left: 0;\n        position: absolute;\n        text-align: center;\n        top: 0;\n        width: 100%;\n        \n        .video-wrapper {\n            position: relative;\n        \n            .close-btn {\n                color: #fff;\n                cursor: pointer;\n                font-size: 1.5em;\n                position: absolute;\n                right: -20px;\n                top: -20px;\n            \n                &:hover {\n                    color: #555;\n                }\n            }\n        }\n    }\n\n    .video-posters-container {\n        float: right;\n        height: 100%;\n        text-align: center;\n        width: 70%;\n    \n        .video-poster {\n            box-shadow: 2px 2px 2px #555;\n            cursor: pointer;\n            display: inline-block;\n            margin: 5px;\n            max-width: 35%;\n            vertical-align: middle;\n        \n            &.visited {\n                opacity: 0.5;\n            }\n        \n            img {\n                display: block;\n                width: 100%;\n            }\n        }\n    }\n    \n    .scale-enter, .scale-appear {\n        opacity: 0;\n        \n        -webkit-transform: scale(0, 0);\n           -moz-transform: scale(0, 0);\n            -ms-transform: scale(0, 0);\n             -o-transform: scale(0, 0);\n                transform: scale(0, 0);\n      \n        &.scale-enter-active, &.scale-appear-active {\n            opacity: 1;\n            \n            -webkit-transform: scale(1, 1);\n               -moz-transform: scale(1, 1);\n                -ms-transform: scale(1, 1);\n                 -o-transform: scale(1, 1);\n                    transform: scale(1, 1);\n            \n            -webkit-transition: transform 750ms linear, opacity 750ms linear;\n                    transition: transform 750ms linear, opacity 750ms linear;\n        }\n    }\n    \n    .scale-leave {\n        opacity: 1;\n        \n        -webkit-transform: scale(1, 1);\n           -moz-transform: scale(1, 1);\n            -ms-transform: scale(1, 1);\n             -o-transform: scale(1, 1);\n                transform: scale(1, 1);\n        \n        &.scale-leave-active {\n            opacity: 0;\n            \n            -webkit-transform: scale(0, 0);\n               -moz-transform: scale(0, 0);\n                -ms-transform: scale(0, 0);\n                 -o-transform: scale(0, 0);\n                    transform: scale(0, 0);\n            \n            -webkit-transition: transform 750ms linear, opacity 750ms linear;\n                    transition: transform 750ms linear, opacity 750ms linear;\n        }\n    }\n}","processed":".VideoSwap .content-wrapper {\n  height: 100%;\n  padding: 20px;\n  padding-top: 40px; }\n\n.VideoSwap .intro-container {\n  float: left;\n  height: 100%;\n  width: 30%; }\n  .VideoSwap .intro-container .directions {\n    font-size: 1.3em;\n    margin-bottom: 10px; }\n  .VideoSwap .intro-container .intro {\n    margin-bottom: 10px; }\n  .VideoSwap .intro-container h1 {\n    margin-bottom: 10px; }\n\n.VideoSwap .video-overlay {\n  background-color: rgba(0, 0, 0, 0.75);\n  height: 100%;\n  left: 0;\n  position: absolute;\n  text-align: center;\n  top: 0;\n  width: 100%; }\n  .VideoSwap .video-overlay .video-wrapper {\n    position: relative; }\n    .VideoSwap .video-overlay .video-wrapper .close-btn {\n      color: #fff;\n      cursor: pointer;\n      font-size: 1.5em;\n      position: absolute;\n      right: -20px;\n      top: -20px; }\n      .VideoSwap .video-overlay .video-wrapper .close-btn:hover {\n        color: #555; }\n\n.VideoSwap .video-posters-container {\n  float: right;\n  height: 100%;\n  text-align: center;\n  width: 70%; }\n  .VideoSwap .video-posters-container .video-poster {\n    box-shadow: 2px 2px 2px #555;\n    cursor: pointer;\n    display: inline-block;\n    margin: 5px;\n    max-width: 35%;\n    vertical-align: middle; }\n    .VideoSwap .video-posters-container .video-poster.visited {\n      opacity: 0.5; }\n    .VideoSwap .video-posters-container .video-poster img {\n      display: block;\n      width: 100%; }\n\n.VideoSwap .scale-enter, .VideoSwap .scale-appear {\n  opacity: 0;\n  -webkit-transform: scale(0, 0);\n  -moz-transform: scale(0, 0);\n  -ms-transform: scale(0, 0);\n  -o-transform: scale(0, 0);\n  transform: scale(0, 0); }\n  .VideoSwap .scale-enter.scale-enter-active, .VideoSwap .scale-enter.scale-appear-active, .VideoSwap .scale-appear.scale-enter-active, .VideoSwap .scale-appear.scale-appear-active {\n    opacity: 1;\n    -webkit-transform: scale(1, 1);\n    -moz-transform: scale(1, 1);\n    -ms-transform: scale(1, 1);\n    -o-transform: scale(1, 1);\n    transform: scale(1, 1);\n    -webkit-transition: transform 750ms linear, opacity 750ms linear;\n    transition: transform 750ms linear, opacity 750ms linear; }\n\n.VideoSwap .scale-leave {\n  opacity: 1;\n  -webkit-transform: scale(1, 1);\n  -moz-transform: scale(1, 1);\n  -ms-transform: scale(1, 1);\n  -o-transform: scale(1, 1);\n  transform: scale(1, 1); }\n  .VideoSwap .scale-leave.scale-leave-active {\n    opacity: 0;\n    -webkit-transform: scale(0, 0);\n    -moz-transform: scale(0, 0);\n    -ms-transform: scale(0, 0);\n    -o-transform: scale(0, 0);\n    transform: scale(0, 0);\n    -webkit-transition: transform 750ms linear, opacity 750ms linear;\n    transition: transform 750ms linear, opacity 750ms linear; }\n"},"react":{"mode":"jsx","value":"const ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;\n\nvar Template = React.createClass({\n    componentDidMount () {\n        this.savedData = this.props.savedData && this.props.savedData[this.props.guid]\n            ? this.props.savedData[this.props.guid]\n            : {};\n    },\n    getInitialState () {\n        return { video: undefined };\n    },\n    onNextBtnClick (e) {\n        if (this.props.navigateNext) {\n            this.props.navigateNext();\n        }\n    },\n    onVideoPosterClick (index) {\n        if (!this.savedData.visited) {\n            this.savedData.visited = [];\n        }\n        \n        if (this.savedData.visited.indexOf(index) == -1) {\n            this.savedData.visited.push(index);\n        }\n        \n        var complete = (this.savedData.visited.length >= this.props.videos.length);\n        if (complete) {\n            this.savedData.status = CourseConstants.STATUS_COMPLETE;\n        }\n        \n        this.savedData.completion = Math.round((this.savedData.visited.length / this.props.videos.length) * 100);\n        CourseActions.saveData({\n            name: this.props.guid,\n            value: this.savedData\n        });\n        \n        this.setState({ video: this.props.videos[index].src });\n    },\n    onVideoCloseBtnClick (e) {\n        this.setState({ video: undefined });\n    },\n\trender () {\n\t    if (!this.props.videos || !this.props.videos.length) {\n\t        return <div />;\n\t    }\n\t    \n\t    var posters = this.props.videos.map(this.renderVideos);\n\t    var nextBtn;\n\t    var video;\n\t        \n\t    if (this.savedData && this.savedData.status == CourseConstants.STATUS_COMPLETE) {\n\t        nextBtn = <button onClick={this.onNextBtnClick}>{this.props.nextLabel}</button>;\n\t    }\n\t    \n\t    if (this.state.video) {\n\t        video = (\n\t            <div className=\"sudo-vert-align-cont video-overlay\">\n                    <div className=\"sudo-vert-align-child video-wrapper\">\n                        <video \n                            autoPlay=\"autoplay\" \n                            controls=\"controls\" \n                            src={this.state.video} />\n                        <div \n                            className=\"close-btn\" \n                            onClick={this.onVideoCloseBtnClick}>\n                                <span className=\"icon icon-x\" />\n                        </div>\n                    </div>\n                </div>\n            );\n\t    }\n\t    \n\t    return (\n\t        <div className=\"content-wrapper\">\n\t            <div className=\"intro-container\">\n\t                <h1 className=\"highlight-text\">{this.props.header}</h1>\n\t                <p className=\"directions\">{this.props.directions}</p>\n\t                <div className=\"intro\" dangerouslySetInnerHTML={{ __html: this.props.intro }} />\n\t                {nextBtn}\n\t            </div>\n\t            <div className=\"sudo-vert-align-cont video-posters-container\">\n\t                <div className=\"sudo-vert-align-child\">\n\t                    {posters}\n\t                </div>\n\t            </div>\n\t            <ReactCSSTransitionGroup\n\t                transitionName=\"scale\">\n\t                {video}\n\t            </ReactCSSTransitionGroup>\n\t            <div style={{ clear: 'both' }} />\n\t        </div>\n\t    );\n\t},\n\trenderVideos (video, index) {\n\t    var visited = (\n\t        this.savedData && this.savedData.visited\n\t            ? this.savedData.visited.indexOf(index) > -1\n\t            : false\n\t    );\n\t    \n\t    return (\n\t        <div \n\t            className={`video-poster ${visited ? 'visited' : ''}`}\n\t            key={index}\n\t            onClick={this.onVideoPosterClick.bind(this, index)}>\n\t                <img src={video.poster} />\n\t        </div>\n\t    );\n\t}\n});","processed":"\"use strict\";\n\nvar ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;\n\nvar Template = React.createClass({\n\t\t\t\tdisplayName: \"Template\",\n\n\t\t\t\tcomponentDidMount: function componentDidMount() {\n\t\t\t\t\t\t\t\tthis.savedData = this.props.savedData && this.props.savedData[this.props.guid] ? this.props.savedData[this.props.guid] : {};\n\t\t\t\t},\n\t\t\t\tgetInitialState: function getInitialState() {\n\t\t\t\t\t\t\t\treturn { video: undefined };\n\t\t\t\t},\n\t\t\t\tonNextBtnClick: function onNextBtnClick(e) {\n\t\t\t\t\t\t\t\tif (this.props.navigateNext) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.props.navigateNext();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonVideoPosterClick: function onVideoPosterClick(index) {\n\t\t\t\t\t\t\t\tif (!this.savedData.visited) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.savedData.visited = [];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (this.savedData.visited.indexOf(index) == -1) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.savedData.visited.push(index);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar complete = this.savedData.visited.length >= this.props.videos.length;\n\t\t\t\t\t\t\t\tif (complete) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.savedData.status = CourseConstants.STATUS_COMPLETE;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.savedData.completion = Math.round(this.savedData.visited.length / this.props.videos.length * 100);\n\t\t\t\t\t\t\t\tCourseActions.saveData({\n\t\t\t\t\t\t\t\t\t\t\t\tname: this.props.guid,\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: this.savedData\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tthis.setState({ video: this.props.videos[index].src });\n\t\t\t\t},\n\t\t\t\tonVideoCloseBtnClick: function onVideoCloseBtnClick(e) {\n\t\t\t\t\t\t\t\tthis.setState({ video: undefined });\n\t\t\t\t},\n\t\t\t\trender: function render() {\n\t\t\t\t\t\t\t\tif (!this.props.videos || !this.props.videos.length) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn React.createElement(\"div\", null);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar posters = this.props.videos.map(this.renderVideos);\n\t\t\t\t\t\t\t\tvar nextBtn;\n\t\t\t\t\t\t\t\tvar video;\n\n\t\t\t\t\t\t\t\tif (this.savedData && this.savedData.status == CourseConstants.STATUS_COMPLETE) {\n\t\t\t\t\t\t\t\t\t\t\t\tnextBtn = React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"button\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ onClick: this.onNextBtnClick },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.nextLabel\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (this.state.video) {\n\t\t\t\t\t\t\t\t\t\t\t\tvideo = React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"sudo-vert-align-cont video-overlay\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"sudo-vert-align-child video-wrapper\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\"video\", {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tautoPlay: \"autoplay\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontrols: \"controls\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc: this.state.video }),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: \"close-btn\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick: this.onVideoCloseBtnClick },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\"span\", { className: \"icon icon-x\" })\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"content-wrapper\" },\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"intro-container\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"h1\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"highlight-text\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.header\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"p\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"directions\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.directions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\"div\", { className: \"intro\", dangerouslySetInnerHTML: { __html: this.props.intro } }),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnextBtn\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"sudo-vert-align-cont video-posters-container\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"sudo-vert-align-child\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tposters\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReactCSSTransitionGroup,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransitionName: \"scale\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvideo\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\"div\", { style: { clear: 'both' } })\n\t\t\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\trenderVideos: function renderVideos(video, index) {\n\t\t\t\t\t\t\t\tvar visited = this.savedData && this.savedData.visited ? this.savedData.visited.indexOf(index) > -1 : false;\n\n\t\t\t\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: \"video-poster \" + (visited ? 'visited' : ''),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey: index,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick: this.onVideoPosterClick.bind(this, index) },\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\"img\", { src: video.poster })\n\t\t\t\t\t\t\t\t);\n\t\t\t\t}\n});"},"schema":{"mode":"json","value":"{\n    \"header\": {\n        \"name\": \"Header\",\n        \"type\": \"string\"\n    },\n    \"directions\": {\n        \"name\": \"Directions\",\n        \"type\": \"string\"\n    },\n    \"intro\": {\n        \"name\": \"Introduction\",\n        \"type\": \"html\"\n    },\n    \"nextLabel\": {\n        \"name\": \"Next Label\",\n        \"type\": \"string\"\n    },\n    \"videos\": {\n        \"name\": \"Videos\",\n        \"type\": \"array\",\n        \"schema\": {\n            \"name\": \"Video\",\n            \"type\": \"object\",\n            \"props\": {\n                \"poster\": {\n                    \"name\": \"Poster Image\",\n                    \"type\": \"file\"\n                },\n                \"src\": {\n                    \"name\": \"Video Source\",\n                    \"type\": \"file\"\n                }\n            }\n        }\n    }\n}"}},"name":"VideoSwap","version":"0.0.0"}