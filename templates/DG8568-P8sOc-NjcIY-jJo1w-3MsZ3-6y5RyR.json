{"data":{"css":{"mode":"scss","value":".AccordionSwap {\n    .content-wrapper {\n        padding: 20px;\n        padding-top: 40px;\n    }\n\n    .intro-container {\n        float: left;\n        height: 100%;\n        width: 30%;\n    \n        .directions {\n            font-size: 1.3em;\n            margin-bottom: 10px;\n        }\n        \n        .intro {\n            margin-bottom: 10px;\n        }\n    \n        h1 {\n            margin-bottom: 10px;\n        }\n    }\n\n    .links {\n        float: right;\n        height: 100%;\n        padding-left: 15px;\n        width: calc(70% - 15px);\n        \n        .link {\n            border: 1px solid #f92;\n            height: 100%;\n            margin-bottom: 10px;\n            max-height: 35px;\n            overflow: hidden;\n            width: 100%;\n            \n            -webkit-transition: max-height 1s;\n               -moz-transition: max-height 1s;\n                -ms-transition: max-height 1s;\n                 -o-transition: max-height 1s;\n                    transition: max-height 1s;\n                \n            &.selected {\n                max-height: 600px;\n            }\n        \n            .link-body {\n                padding: 10px;\n                \n                .link-body-content {\n                    float: left;\n                    width: 50%;\n                    \n                    &.full-width {\n                        float: none;\n                        width: 100%;\n                    }\n                }\n                \n                .link-body-image {\n                    float: right;\n                    width: 50%;\n                    \n                    &.full-width {\n                        display: block;\n                        float: none;\n                        margin: 0 auto;\n                        max-width: 500px;\n                        width: 100%;\n                    }\n                }\n                \n                h2 {\n                    margin-bottom: 10px;\n                }\n            }\n        \n            .link-header {\n                color: #fff;\n                cursor: pointer;\n                font-size: 1.2em;\n                font-weight: bold;\n                height: 35px;\n                line-height: 35px;\n                padding: 0 10px;\n            }\n        }\n    }\n}\n        \n        ","processed":".AccordionSwap .content-wrapper {\n  padding: 20px;\n  padding-top: 40px; }\n\n.AccordionSwap .intro-container {\n  float: left;\n  height: 100%;\n  width: 30%; }\n  .AccordionSwap .intro-container .directions {\n    font-size: 1.3em;\n    margin-bottom: 10px; }\n  .AccordionSwap .intro-container .intro {\n    margin-bottom: 10px; }\n  .AccordionSwap .intro-container h1 {\n    margin-bottom: 10px; }\n\n.AccordionSwap .links {\n  float: right;\n  height: 100%;\n  padding-left: 15px;\n  width: calc(70% - 15px); }\n  .AccordionSwap .links .link {\n    border: 1px solid #f92;\n    height: 100%;\n    margin-bottom: 10px;\n    max-height: 35px;\n    overflow: hidden;\n    width: 100%;\n    -webkit-transition: max-height 1s;\n    -moz-transition: max-height 1s;\n    -ms-transition: max-height 1s;\n    -o-transition: max-height 1s;\n    transition: max-height 1s; }\n    .AccordionSwap .links .link.selected {\n      max-height: 600px; }\n    .AccordionSwap .links .link .link-body {\n      padding: 10px; }\n      .AccordionSwap .links .link .link-body .link-body-content {\n        float: left;\n        width: 50%; }\n        .AccordionSwap .links .link .link-body .link-body-content.full-width {\n          float: none;\n          width: 100%; }\n      .AccordionSwap .links .link .link-body .link-body-image {\n        float: right;\n        width: 50%; }\n        .AccordionSwap .links .link .link-body .link-body-image.full-width {\n          display: block;\n          float: none;\n          margin: 0 auto;\n          max-width: 500px;\n          width: 100%; }\n      .AccordionSwap .links .link .link-body h2 {\n        margin-bottom: 10px; }\n    .AccordionSwap .links .link .link-header {\n      color: #fff;\n      cursor: pointer;\n      font-size: 1.2em;\n      font-weight: bold;\n      height: 35px;\n      line-height: 35px;\n      padding: 0 10px; }\n"},"react":{"mode":"jsx","value":"var Template = React.createClass({\n    componentDidMount () {\n        this.savedData = this.props.savedData && this.props.savedData[this.props.guid]\n            ? this.props.savedData[this.props.guid]\n            : {};\n    },\n    getInitialState () {\n        return { selected: -1 };\n    },\n    onLinkClick (index) {\n        if (!this.savedData.visited) {\n            this.savedData.visited = [];\n        }\n        \n        if (this.savedData.visited.indexOf(index) == -1) {\n            this.savedData.visited.push(index);\n        }\n        \n        var complete = (this.savedData.visited.length >= this.props.links.length);\n        if (complete) {\n            this.savedData.status = CourseConstants.STATUS_COMPLETE;\n        }\n        \n        this.savedData.completion = Math.round((this.savedData.visited.length / this.props.links.length) * 100);\n        CourseActions.saveData({\n            name: this.props.guid,\n            value: this.savedData\n        });\n        \n        this.setState({ selected: index });\n    },\n    onNextBtnClick (e) {\n        if (this.props.navigateNext) {\n            this.props.navigateNext();\n        }\n    },\n\trender () {\n\t    if (!this.props) {\n\t        return <div />;\n\t    }\n\t    \n\t    var links = this.props.links.map(this.renderLinks);\n\t    var nextBtn;\n\t        \n\t    if (this.savedData && this.savedData.status == CourseConstants.STATUS_COMPLETE) {\n\t        nextBtn = <button onClick={this.onNextBtnClick}>{this.props.nextLabel}</button>;\n\t    }\n\t    \n\t    return (\n\t        <div className=\"content-wrapper\">\n\t            <div className=\"intro-container\">\n\t                <h1 className=\"highlight-text\">{this.props.header}</h1>\n\t                <p className=\"directions\">{this.props.directions}</p>\n\t                <div className=\"intro\" dangerouslySetInnerHTML={{ __html: this.props.intro }} />\n\t                {nextBtn}\n\t            </div>\n\t            <div className=\"links\">\n\t                {links}\n\t            </div>\n\t        </div>\n\t    );\n\t},\n\trenderLinks (link, index) {\n\t    var content;\n\t    var contentClass = 'link-body-content';\n\t    var image;\n\t    var imageClass = 'link-body-image';\n\t    \n\t    if (link.content.body && link.content.body != '') {\n\t        content = null;\n\t    } else {\n\t        imageClass += ' full-width';\n\t    }\n\t    \n\t    if (link.content.image && link.content.image != '') {\n\t        image = null;\n\t    } else {\n\t        contentClass += ' full-width';\n\t    }\n\t    \n\t    if (content == null) {\n\t        content = (\n\t            <div \n\t                className={contentClass}\n\t                dangerouslySetInnerHTML={{ __html: link.content.body }} />\n\t        );\n\t    }\n\t    \n\t    if (image == null) {\n\t        image = (\n\t            <img\n\t                className={imageClass}\n\t                src={link.content.image} />\n\t        );\n\t    }\n\t    \n\t    var state = (\n\t        this.state.selected == index\n\t            ? 'selected'\n\t            : this.savedData && this.savedData.visited && this.savedData.visited.indexOf(index) > -1\n\t                ? 'visited'\n\t                : ''\n\t    );\n\t    \n\t    return (\n\t        <div className={`link ${state}`} key={index}>\n\t            <div \n\t                className=\"highlight-bg link-header\"\n\t                onClick={this.onLinkClick.bind(this, index)}>\n\t                    {link.label}\n\t            </div>\n\t            <div className=\"link-body\">\n\t                <h2>{link.content.header}</h2>\n\t                {content}\n\t                {image}\n\t                <div style={{ clear: 'both' }} />\n\t            </div>\n\t        </div>\n\t    );\n\t}\n});","processed":"\"use strict\";\n\nvar Template = React.createClass({\n\t\t\t\tdisplayName: \"Template\",\n\n\t\t\t\tcomponentDidMount: function componentDidMount() {\n\t\t\t\t\t\t\t\tthis.savedData = this.props.savedData && this.props.savedData[this.props.guid] ? this.props.savedData[this.props.guid] : {};\n\t\t\t\t},\n\t\t\t\tgetInitialState: function getInitialState() {\n\t\t\t\t\t\t\t\treturn { selected: -1 };\n\t\t\t\t},\n\t\t\t\tonLinkClick: function onLinkClick(index) {\n\t\t\t\t\t\t\t\tif (!this.savedData.visited) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.savedData.visited = [];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (this.savedData.visited.indexOf(index) == -1) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.savedData.visited.push(index);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar complete = this.savedData.visited.length >= this.props.links.length;\n\t\t\t\t\t\t\t\tif (complete) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.savedData.status = CourseConstants.STATUS_COMPLETE;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.savedData.completion = Math.round(this.savedData.visited.length / this.props.links.length * 100);\n\t\t\t\t\t\t\t\tCourseActions.saveData({\n\t\t\t\t\t\t\t\t\t\t\t\tname: this.props.guid,\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: this.savedData\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tthis.setState({ selected: index });\n\t\t\t\t},\n\t\t\t\tonNextBtnClick: function onNextBtnClick(e) {\n\t\t\t\t\t\t\t\tif (this.props.navigateNext) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.props.navigateNext();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trender: function render() {\n\t\t\t\t\t\t\t\tif (!this.props) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn React.createElement(\"div\", null);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar links = this.props.links.map(this.renderLinks);\n\t\t\t\t\t\t\t\tvar nextBtn;\n\n\t\t\t\t\t\t\t\tif (this.savedData && this.savedData.status == CourseConstants.STATUS_COMPLETE) {\n\t\t\t\t\t\t\t\t\t\t\t\tnextBtn = React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"button\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ onClick: this.onNextBtnClick },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.nextLabel\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"content-wrapper\" },\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"intro-container\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"h1\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"highlight-text\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.header\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"p\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"directions\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.directions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\"div\", { className: \"intro\", dangerouslySetInnerHTML: { __html: this.props.intro } }),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnextBtn\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"links\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlinks\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\trenderLinks: function renderLinks(link, index) {\n\t\t\t\t\t\t\t\tvar content;\n\t\t\t\t\t\t\t\tvar contentClass = 'link-body-content';\n\t\t\t\t\t\t\t\tvar image;\n\t\t\t\t\t\t\t\tvar imageClass = 'link-body-image';\n\n\t\t\t\t\t\t\t\tif (link.content.body && link.content.body != '') {\n\t\t\t\t\t\t\t\t\t\t\t\tcontent = null;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\timageClass += ' full-width';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (link.content.image && link.content.image != '') {\n\t\t\t\t\t\t\t\t\t\t\t\timage = null;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcontentClass += ' full-width';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (content == null) {\n\t\t\t\t\t\t\t\t\t\t\t\tcontent = React.createElement(\"div\", {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: contentClass,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdangerouslySetInnerHTML: { __html: link.content.body } });\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (image == null) {\n\t\t\t\t\t\t\t\t\t\t\t\timage = React.createElement(\"img\", {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: imageClass,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc: link.content.image });\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar state = this.state.selected == index ? 'selected' : this.savedData && this.savedData.visited && this.savedData.visited.indexOf(index) > -1 ? 'visited' : '';\n\n\t\t\t\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"link \" + state, key: index },\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName: \"highlight-bg link-header\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick: this.onLinkClick.bind(this, index) },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink.label\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ className: \"link-body\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"h2\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink.content.header\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\timage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\"div\", { style: { clear: 'both' } })\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t}\n});"},"schema":{"mode":"json","value":"{\n    \"header\": {\n        \"name\": \"Header\",\n        \"type\": \"string\"\n    },\n    \"directions\": {\n        \"name\": \"Directions\",\n        \"type\": \"string\"\n    },\n    \"intro\": {\n        \"name\": \"Introduction\",\n        \"type\": \"html\"\n    },\n    \"exclusiveSelect\": {\n        \"name\": \"Exclusive Select?\",\n        \"type\": \"boolean\"\n    },\n    \"nextLabel\": {\n        \"name\": \"Next Label\",\n        \"type\": \"string\"\n    },\n    \"links\": {\n        \"name\": \"Accordion Links\",\n        \"type\": \"array\",\n        \"schema\": {\n            \"name\": \"Link\",\n            \"type\": \"object\",\n            \"props\": {\n                \"label\": {\n                    \"name\": \"Label\",\n                    \"type\": \"string\"\n                },\n                \"content\": {\n                    \"name\": \"Content (optional)\",\n                    \"type\": \"object\",\n                    \"props\": {\n                        \"header\": {\n                            \"name\": \"Header\",\n                            \"type\": \"string\"\n                        },\n                        \"body\": {\n                            \"name\": \"Body\",\n                            \"type\": \"html\"\n                        },\n                        \"image\": {\n                            \"name\": \"Image (optional)\",\n                            \"type\": \"file\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}},"name":"AccordionSwap","version":"0.0.0"}