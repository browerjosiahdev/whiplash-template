{"data":{"css":{"mode":"scss","value":".GraphicMultipleChoice {\n    .content-wrapper {\n        padding: 40px 20px 0 20px;\n    }\n\n    .directions {\n        margin-bottom: 10px;\n    }\n    \n    .stem {\n        margin-bottom: 10px;\n    }\n    \n    .options {\n        &.answered {\n            .option {\n                cursor: default;\n                \n                &.correct {\n                    .option-overlay {\n                        background-color: rgba(153, 204, 238, 0.5);\n                    }\n                }\n                \n                &.incorrect {\n                    .option-overlay {\n                        background-color: rgba(255, 153, 34, 0.5);\n                    }\n                }\n                \n                .option-feedback {\n                    display: inline-block;\n                }\n            }\n        }\n        \n        .option {\n            cursor: pointer;\n            display: inline-block;\n            margin: 0 10px 10px 0;\n            position: relative;\n            vertical-align: middle;\n            \n            &.selected {\n                .option-overlay {\n                    display: block;\n                }\n            }\n            \n            .option-feedback {\n                color: #fff;\n                display: none;\n                text-align: center;\n                vertical-align: middle;\n                width: 100%;\n                \n                .icon {\n                    font-size: 3em;\n                }\n            }\n            \n            .option-overlay {\n                background-color: rgba(136, 136, 136, 0.5);\n                display: none;\n                height: 100%;\n                left: 0;\n                position: absolute;\n                top: 0;\n                width: 100%;\n                \n                &:before {\n                    content: ' ';\n                    display: inline-block;\n                    height: 100%;\n                    margin-right: -0.25em;\n                    vertical-align: middle;\n                }\n            }\n        }\n    }\n    \n    h1 {\n        margin-bottom: 10px;\n    }\n}","processed":".GraphicMultipleChoice .content-wrapper {\n  padding: 40px 20px 0 20px; }\n\n.GraphicMultipleChoice .directions {\n  margin-bottom: 10px; }\n\n.GraphicMultipleChoice .stem {\n  margin-bottom: 10px; }\n\n.GraphicMultipleChoice .options.answered .option {\n  cursor: default; }\n  .GraphicMultipleChoice .options.answered .option.correct .option-overlay {\n    background-color: rgba(153, 204, 238, 0.5); }\n  .GraphicMultipleChoice .options.answered .option.incorrect .option-overlay {\n    background-color: rgba(255, 153, 34, 0.5); }\n  .GraphicMultipleChoice .options.answered .option .option-feedback {\n    display: inline-block; }\n\n.GraphicMultipleChoice .options .option {\n  cursor: pointer;\n  display: inline-block;\n  margin: 0 10px 10px 0;\n  position: relative;\n  vertical-align: middle; }\n  .GraphicMultipleChoice .options .option.selected .option-overlay {\n    display: block; }\n  .GraphicMultipleChoice .options .option .option-feedback {\n    color: #fff;\n    display: none;\n    text-align: center;\n    vertical-align: middle;\n    width: 100%; }\n    .GraphicMultipleChoice .options .option .option-feedback .icon {\n      font-size: 3em; }\n  .GraphicMultipleChoice .options .option .option-overlay {\n    background-color: rgba(136, 136, 136, 0.5);\n    display: none;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    top: 0;\n    width: 100%; }\n    .GraphicMultipleChoice .options .option .option-overlay:before {\n      content: ' ';\n      display: inline-block;\n      height: 100%;\n      margin-right: -0.25em;\n      vertical-align: middle; }\n\n.GraphicMultipleChoice h1 {\n  margin-bottom: 10px; }\n"},"react":{"mode":"jsx","value":"var Template = React.createClass({\n    componentDidMount () {\n        this.savedData = this.props.savedData && this.props.savedData[this.props.guid]\n            ? this.props.savedData[this.props.guid]\n            : {};\n    },\n    getInitialState () {\n        return {\n            answered: false,\n            attempts: 0,\n            selected: [],\n            submitBtn: false\n        };\n    },\n    onOptionClick (index) {\n        if (!this.state.answered) {\n            var selected = this.state.selected;\n            var selectedIndex = selected.indexOf(index);\n            if (selectedIndex > -1) { // If the option is selected.\n                if (this.props.multiSelect) { // If multi-select is on.\n                    selected.splice(selectedIndex, 1); // Deselect the option.\n                }\n            } else { // If the option isn't selected.\n                if (!this.props.multiSelect) { // If multi-select isn't on.\n                    selected = [index]; // Remove all other selection, and select this option.\n                } else {\n                    selected.push(index); // Add this option to the selected list.\n                }\n            }\n            \n            this.setState({\n                selected,\n                submitBtn: (selected.length > 0)\n            });\n        }\n    },\n    handleAnswerAnalysis () {\n        var allCorrect = true;\n        var attempts = (this.state.attempts + 1);\n        for (let i = 0; i < this.props.options.length; i++) {\n            let option = this.props.options[i];\n            if (!!option.isCorrect != this.isSelected(i)) {\n                allCorrect = false;\n            }\n        }\n        \n        var answered = false;\n        if (allCorrect || attempts >= this.props.maxAttempts) {\n            answered = true;\n            this.savedData.completion = 100;\n            this.savedData.status = CourseConstants.STATUS_COMPLETE;\n            CourseActions.saveData({\n                name: this.props.guid,\n                value: this.savedData\n            });\n        }\n        \n        this.setState({ answered, attempts });\n    },\n    isSelected (index) {\n        for (let i = 0; i < this.state.selected.length; i++) {\n            if (this.state.selected[i] == index) {\n                return true;\n            }\n        }\n        return false;\n    },\n    onNextBtnClick (e) {\n        if (this.props.navigateNext) {\n            this.props.navigateNext();\n        }\n    },\n    onSubmitBtnClick (e) {\n        this.handleAnswerAnalysis();\n    },\n\trender () {\n\t    if (!this.props.options || !this.props.options.length) {\n\t        return <div />;\n\t    }\n\t    \n\t    var options = this.props.options.map(this.renderOptions);\n\t    var button;\n\t        \n\t    if (this.state.submitBtn && !this.state.answered) {\n\t        button = (\n                <button \n                    className=\"btn btn-orange\" \n                    onClick={this.onSubmitBtnClick}>\n                        {this.props.submitLabel}\n                </button>\n\t        );\n\t    } else if (this.state.answered) {\n\t        button = (\n\t            <button \n\t                onClick={this.onNextBtnClick}>\n\t                    {this.props.nextLabel}\n\t            </button>\n\t        );\n\t    }\n\t    \n\t    return (\n\t        <div className=\"content-wrapper\">\n\t            <h1>{this.props.header}</h1>\n\t            <p className=\"directions highlight-text\">{this.props.directions}</p>\n\t            <p className=\"stem\">{this.props.stem}</p>\n\t            <div className={`options ${this.state.answered ? 'answered' : ''}`}>\n\t                {options}\n\t            </div>\n\t            {button}\n\t        </div>\n\t    );\n\t},\n\trenderOptions (option, index) {\n\t    return (\n\t        <Option\n\t            {...option}\n\t            disabled={this.state.answered}\n\t            index={index}\n\t            key={index}\n\t            onClick={this.onOptionClick}\n\t            selected={this.isSelected(index)} />\n\t    );\n\t}\n});\n\nvar Option = React.createClass({\n    onClick (e) {\n        if (this.props.onClick) {\n            this.props.onClick(this.props.index);\n        }\n    },\n    render () {\n        var className = (\n            this.props.selected\n                ? this.props.disabled\n                    ? this.props.isCorrect\n                        ? 'correct disabled option selected'\n                        : 'disabled incorrect option selected'\n                    : 'option selected'\n                : this.props.disabled\n                    ? 'disabled option'\n                    : 'option'\n        );\n        var iconClass = (\n            this.props.disabled\n                ? this.props.isCorrect\n                    ? 'icon-checkmark'\n    \t            : 'icon-x'\n    \t        : ''\n        );\n        \n        return (\n\t        <div \n\t            className={className}\n\t            onClick={this.onClick}>\n\t                <img \n\t                    className=\"option-img\" \n\t                    height={`${this.props.height}px`} \n\t                    src={this.props.bg} \n\t                    width={`${this.props.width}px`} />\n    \t            <div className=\"option-overlay\">\n    \t               <div className=\"option-feedback\">\n    \t                <span className={`icon ${iconClass}`} />\n                            <p className=\"feedback-label\">\n    \t                       {this.props.feedbackLabel}\n    \t                    </p>\n    \t               </div>\n    \t            </div>\n\t        </div>\n\t    );\n    }\n})","processed":"\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar Template = React.createClass({\n    displayName: \"Template\",\n\n    componentDidMount: function componentDidMount() {\n        this.savedData = this.props.savedData && this.props.savedData[this.props.guid] ? this.props.savedData[this.props.guid] : {};\n    },\n    getInitialState: function getInitialState() {\n        return {\n            answered: false,\n            attempts: 0,\n            selected: [],\n            submitBtn: false\n        };\n    },\n    onOptionClick: function onOptionClick(index) {\n        if (!this.state.answered) {\n            var selected = this.state.selected;\n            var selectedIndex = selected.indexOf(index);\n            if (selectedIndex > -1) {\n                // If the option is selected.\n                if (this.props.multiSelect) {\n                    // If multi-select is on.\n                    selected.splice(selectedIndex, 1); // Deselect the option.\n                }\n            } else {\n                    // If the option isn't selected.\n                    if (!this.props.multiSelect) {\n                        // If multi-select isn't on.\n                        selected = [index]; // Remove all other selection, and select this option.\n                    } else {\n                            selected.push(index); // Add this option to the selected list.\n                        }\n                }\n\n            this.setState({\n                selected: selected,\n                submitBtn: selected.length > 0\n            });\n        }\n    },\n    handleAnswerAnalysis: function handleAnswerAnalysis() {\n        var allCorrect = true;\n        var attempts = this.state.attempts + 1;\n        for (var i = 0; i < this.props.options.length; i++) {\n            var option = this.props.options[i];\n            if (!!option.isCorrect != this.isSelected(i)) {\n                allCorrect = false;\n            }\n        }\n\n        var answered = false;\n        if (allCorrect || attempts >= this.props.maxAttempts) {\n            answered = true;\n            this.savedData.completion = 100;\n            this.savedData.status = CourseConstants.STATUS_COMPLETE;\n            CourseActions.saveData({\n                name: this.props.guid,\n                value: this.savedData\n            });\n        }\n\n        this.setState({ answered: answered, attempts: attempts });\n    },\n    isSelected: function isSelected(index) {\n        for (var i = 0; i < this.state.selected.length; i++) {\n            if (this.state.selected[i] == index) {\n                return true;\n            }\n        }\n        return false;\n    },\n    onNextBtnClick: function onNextBtnClick(e) {\n        if (this.props.navigateNext) {\n            this.props.navigateNext();\n        }\n    },\n    onSubmitBtnClick: function onSubmitBtnClick(e) {\n        this.handleAnswerAnalysis();\n    },\n    render: function render() {\n        if (!this.props.options || !this.props.options.length) {\n            return React.createElement(\"div\", null);\n        }\n\n        var options = this.props.options.map(this.renderOptions);\n        var button;\n\n        if (this.state.submitBtn && !this.state.answered) {\n            button = React.createElement(\n                \"button\",\n                {\n                    className: \"btn btn-orange\",\n                    onClick: this.onSubmitBtnClick },\n                this.props.submitLabel\n            );\n        } else if (this.state.answered) {\n            button = React.createElement(\n                \"button\",\n                {\n                    onClick: this.onNextBtnClick },\n                this.props.nextLabel\n            );\n        }\n\n        return React.createElement(\n            \"div\",\n            { className: \"content-wrapper\" },\n            React.createElement(\n                \"h1\",\n                null,\n                this.props.header\n            ),\n            React.createElement(\n                \"p\",\n                { className: \"directions highlight-text\" },\n                this.props.directions\n            ),\n            React.createElement(\n                \"p\",\n                { className: \"stem\" },\n                this.props.stem\n            ),\n            React.createElement(\n                \"div\",\n                { className: \"options \" + (this.state.answered ? 'answered' : '') },\n                options\n            ),\n            button\n        );\n    },\n    renderOptions: function renderOptions(option, index) {\n        return React.createElement(Option, _extends({}, option, {\n            disabled: this.state.answered,\n            index: index,\n            key: index,\n            onClick: this.onOptionClick,\n            selected: this.isSelected(index) }));\n    }\n});\n\nvar Option = React.createClass({\n    displayName: \"Option\",\n\n    onClick: function onClick(e) {\n        if (this.props.onClick) {\n            this.props.onClick(this.props.index);\n        }\n    },\n    render: function render() {\n        var className = this.props.selected ? this.props.disabled ? this.props.isCorrect ? 'correct disabled option selected' : 'disabled incorrect option selected' : 'option selected' : this.props.disabled ? 'disabled option' : 'option';\n        var iconClass = this.props.disabled ? this.props.isCorrect ? 'icon-checkmark' : 'icon-x' : '';\n\n        return React.createElement(\n            \"div\",\n            {\n                className: className,\n                onClick: this.onClick },\n            React.createElement(\"img\", {\n                className: \"option-img\",\n                height: this.props.height + \"px\",\n                src: this.props.bg,\n                width: this.props.width + \"px\" }),\n            React.createElement(\n                \"div\",\n                { className: \"option-overlay\" },\n                React.createElement(\n                    \"div\",\n                    { className: \"option-feedback\" },\n                    React.createElement(\"span\", { className: \"icon \" + iconClass }),\n                    React.createElement(\n                        \"p\",\n                        { className: \"feedback-label\" },\n                        this.props.feedbackLabel\n                    )\n                )\n            )\n        );\n    }\n});"},"schema":{"mode":"json","value":"{\n    \"header\": {\n        \"name\": \"Header\",\n        \"type\": \"string\"\n    },\n    \"directions\": {\n        \"name\": \"Directions\",\n        \"type\": \"string\"\n    },\n    \"stem\": {\n        \"name\": \"Stem\",\n        \"type\": \"string\"\n    },\n    \"submit\": {\n        \"name\": \"Submit Button?\",\n        \"type\": \"boolean\"\n    },\n    \"submitLabel\": {\n        \"name\": \"Submit Label\",\n        \"type\": \"string\"\n    },\n    \"nextLabel\": {\n        \"name\": \"Next Label\",\n        \"type\": \"string\"\n    },\n    \"multiSelect\": {\n        \"name\": \"Multi-Select?\",\n        \"type\": \"boolean\"\n    },\n    \"maxAttempts\": {\n        \"name\": \"Max Attempts\",\n        \"type\": \"integer\"\n    },\n    \"options\": {\n        \"name\": \"Options\",\n        \"type\": \"array\",\n        \"schema\": {\n            \"name\": \"Option\",\n            \"type\": \"object\",\n            \"props\": {\n                \"bg\": {\n                    \"name\": \"Background\",\n                    \"type\": \"file\"\n                },\n                \"height\": {\n                    \"name\": \"Height\",\n                    \"type\": \"integer\"\n                },\n                \"width\": {\n                    \"name\": \"Width\",\n                    \"type\": \"integer\"\n                },\n                \"isCorrect\": {\n                    \"name\": \"Is Correct?\",\n                    \"type\": \"boolean\"\n                },\n                \"feedbackLabel\": {\n                    \"name\": \"Feedback Label\",\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}"}},"name":"GraphicMultipleChoice","version":"0.0.0"}